<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Syber老李 - 你的AI反恋爱脑闺蜜/情感搭子Agent</title>
    <link rel="icon" type="image/svg+xml" href="/static/favicon.svg">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/static/styles.css">
</head>
<body>
    <div class="chat-container">
        <!-- 顶部区域 - 精简设计 -->
        <div class="chat-header">
            <div class="header-left">
                <div class="chat-title">
                    Syber老李 💜
                    <span id="personaDisplay" class="persona-status">💬 正常聊天</span>
                </div>
                <div class="chat-subtitle">AI反恋爱脑闺蜜 - 你的吐槽/毒舌/八卦/情感搭子</div>
            </div>
            
            <div class="header-right">
                <!-- 恋爱脑指数 - 扩展版本 -->
                <div class="love-brain-indicator love-brain-hidden" id="loveBrainIndicator">
                    <div class="love-brain-compact">
                        <div class="meter-header">
                            <span>恋爱脑指数：<span id="meterValue">--</span></span>
                            <span class="meter-level" id="meterLevel">未检测</span>
                        </div>
                        <div class="meter-bar">
                            <div class="meter-fill" id="meterFill" style="width: 0%"></div>
                        </div>
                    </div>
                </div>



                <!-- 记忆状态指示器 -->
                <div class="memory-indicator" id="memoryIndicator" title="点击查看记忆详情">
                    <div class="memory-compact">
                        <span class="memory-icon">🧠</span>
                        <span class="memory-text">记忆: <span id="memoryRounds">0</span>轮</span>
                        <span class="memory-usage" id="memoryUsage">0%</span>
                    </div>
                </div>
                
                <button class="new-session-button" id="newSessionButton">🔄 新会话</button>
            </div>
        </div>
        
        <!-- 聊天消息区域 -->
        <div class="chat-messages" id="chatMessages">
            <div class="message ai">
                <div class="message-avatar">拽</div>
                <div class="message-content">
                    <div class="typewriter" id="welcomeMessage"></div>
                </div>
            </div>
        </div>
        
        <!-- 底部输入区域 -->
        <div class="chat-input-container">
            <div class="persona-selector">
                <div class="persona-modes">
                    <span class="persona-label">模式:</span>
                    <div class="persona-option active" data-button-type="正常聊天">💬 正常聊天</div>
                    <div class="persona-option" data-button-type="🌊对战海王">🌊 对战海王</div>
                    <div class="persona-option" data-button-type="🍵反茶艺大师">🍵 反茶艺大师</div>
                    <div class="persona-option" data-button-type="🌈决战通讯录之巅">🌈 决战通讯录之巅</div>
                    <div class="persona-option" data-button-type="💃姬圈擂台赛">💃 姬圈擂台赛</div>
                </div>
                
                <!-- 海王模式得分指示器 - 只在海王模式时显示，居右显示 -->
                <div class="seaking-score-inline seaking-score-hidden" id="seakingScoreInline">
                    <span class="seaking-score-icon">🏆</span>
                    <span class="seaking-score-text">得分: <span id="seakingScoreValue">0</span></span>
                    <div class="seaking-score-progress">
                        <div class="seaking-score-fill" id="seakingScoreFill" style="width: 0%"></div>
                    </div>
                </div>
            </div>
            <div class="chat-input-wrapper">
                <textarea 
                    id="chatInput" 
                    class="chat-input" 
                    placeholder="来，跟老李说说你的困扰吧..."
                    rows="1"
                ></textarea>
                <button id="sendButton" class="send-button">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <line x1="22" y1="2" x2="11" y2="13"></line>
                        <polygon points="22,2 15,22 11,13 2,9 22,2"></polygon>
                    </svg>
                </button>
            </div>
        </div>
    </div>

    <script>
        // 全局变量
        let currentButtonType = '正常聊天';
        let currentSeakingScore = 0;

        let isTyping = false;
        let conversationHistory = [];
        let currentSeakingPersona = null; // 存储当前海王对战的人设信息
        let hasTriggeredFirstRound = false; // 防止重复触发第一轮对话

        // DOM 元素
        const chatMessages = document.getElementById('chatMessages');
        const chatInput = document.getElementById('chatInput');
        const sendButton = document.getElementById('sendButton');
        const personaOptions = document.querySelectorAll('.persona-option');
        const personaDisplay = document.getElementById('personaDisplay');
        const newSessionButton = document.getElementById('newSessionButton');
        const welcomeMessage = document.getElementById('welcomeMessage');
        
        // 恋爱脑指数相关元素
        const loveBrainIndicator = document.getElementById('loveBrainIndicator');
        const meterFill = document.getElementById('meterFill');
        const meterLevel = document.getElementById('meterLevel');
        const meterValue = document.getElementById('meterValue');

        // 海王对战得分相关元素
        const seakingScoreInline = document.getElementById('seakingScoreInline');
        const seakingScoreValue = document.getElementById('seakingScoreValue');
        const seakingScoreFill = document.getElementById('seakingScoreFill');

        // 记忆状态相关元素
        const memoryIndicator = document.getElementById('memoryIndicator');
        const memoryRounds = document.getElementById('memoryRounds');
        const memoryUsage = document.getElementById('memoryUsage');

        // 初始化
        document.addEventListener('DOMContentLoaded', function() {
            typeWelcomeMessage();
            chatInput.focus();
            autoResizeTextarea();
            // 延迟加载记忆状态，确保页面完全初始化
            setTimeout(() => {
                console.log('🏁 页面初始化：开始加载记忆状态');
                loadMemoryStats();
            }, 500);
        });

        // 欢迎消息打字机效果
        function typeWelcomeMessage() {
            const messages = [
                "😈 耶斯莫拉！集美好久不见啊！——姐是你的赛博铁子老李💜！有啥情感困扰尽管来吐槽！也可以试试🎮对战海王模式，学学咋反恋爱套路！"
            ];
            
            let messageIndex = 0;
            let charIndex = 0;
            
            function typeChar() {
                if (messageIndex < messages.length) {
                    if (charIndex < messages[messageIndex].length) {
                        const char = messages[messageIndex].charAt(charIndex);
                        welcomeMessage.textContent += char;
                        charIndex++;
                        setTimeout(typeChar, 30);
                    } else {
                        // 当前消息完成，移动到下一个消息
                        messageIndex++;
                        charIndex = 0;
                        if (messageIndex < messages.length) {
                            welcomeMessage.textContent += '\n';
                            setTimeout(typeChar, 800);
                        }
                        // 所有消息完成，无需特殊处理
                    }
                }
            }
            
            typeChar();
        }

        // 自动调整文本框高度
        function autoResizeTextarea() {
            chatInput.addEventListener('input', function() {
                // 保存当前滚动位置
                const currentScrollTop = chatMessages.scrollTop;
                
                // 临时设置为auto来计算所需高度
                const currentHeight = this.style.height;
                this.style.height = 'auto';
                const newHeight = Math.min(this.scrollHeight, 120);
                
                // 平滑过渡到新高度
                this.style.height = newHeight + 'px';
                
                // 恢复滚动位置，避免跳动
                chatMessages.scrollTop = currentScrollTop;
            });
        }

        // 获取模式显示文本（带emoji）
        function getPersonaDisplayText(text, buttonType) {
            // 直接返回按钮文本，因为按钮文本已经包含了对应的icon
            return text;
        }

        // 模式切换
        personaOptions.forEach(option => {
            option.addEventListener('click', async function() {
                personaOptions.forEach(opt => opt.classList.remove('active'));
                this.classList.add('active');
                currentButtonType = this.dataset.buttonType;
                personaDisplay.textContent = getPersonaDisplayText(this.textContent, currentButtonType);
                
                console.log('模式切换:', currentButtonType);
                
                // 重置海王对战状态
                if (currentButtonType !== '正常聊天') {
                    // 只有在切换不同模式或没有当前人设时才重置状态
                    const shouldReset = !currentSeakingPersona || currentSeakingPersona.button_type !== currentButtonType;
                    
                    if (shouldReset) {
                        currentSeakingScore = 0;
                        hasTriggeredFirstRound = false; // 重置第一轮触发标记
                        
                        // 从本地JSON文件获取人设
                        try {
                            const personasResponse = await fetch(`/static/personas.json?v=${Date.now()}`);
                            if (personasResponse.ok) {
                                const personasData = await personasResponse.json();
                                console.log('[DEBUG] 获取到的personas数据:', Object.keys(personasData));
                                console.log('[DEBUG] 当前按钮类型:', currentButtonType);
                                const config = personasData[currentButtonType];
                                console.log('[DEBUG] 找到的配置:', config);
                                if (config && config.personas) {
                                    // 随机选择一个人设
                                    const randomPersona = config.personas[Math.floor(Math.random() * config.personas.length)];
                                    currentSeakingPersona = {
                                        button_type: currentButtonType,
                                        persona: randomPersona.name,
                                        gender: randomPersona.gender,
                                        user_gender: randomPersona.user_gender,
                                        challenge_type: randomPersona.challenge_type,
                                        first_greeting: randomPersona.first_greeting,
                                        description: randomPersona.description,
                                        style: randomPersona.style,
                                        weakness: randomPersona.weakness
                                    };
                                    console.log('获取新人设:', currentSeakingPersona);
                                    
                                    // 显示人设说明
                                    addSystemMessage(`已切换进入${this.textContent}模式，目标是回复得分达100！本次挑战海王：${randomPersona.name}`);
                                    
                                    // 自动触发第一轮对话，获取挑战目标和海王开场白
                                    setTimeout(async () => {
                                        await triggerFirstSeakingRound();
                                    }, 500);
                                } else {
                                    addSystemMessage(`已切换到 ${this.textContent} 模式，准备开始海王对战！`);
                                }
                            } else {
                                addSystemMessage(`已切换到 ${this.textContent} 模式，准备开始海王对战！`);
                            }
                        } catch (error) {
                            console.error('获取人设失败:', error);
                            addSystemMessage(`已切换到 ${this.textContent} 模式，准备开始海王对战！`);
                        }
                    } else {
                        // 如果不需要重置，只显示当前模式信息
                        addSystemMessage(`继续${this.textContent}模式，当前海王：${currentSeakingPersona.persona}`);
                    }
                    
                    // 显示海王得分指示器
                    updateSeakingScore(currentSeakingScore);
                } else {
                    // 切换到正常聊天模式时，重置所有海王相关状态
                    currentSeakingScore = 0;
                    hasTriggeredFirstRound = false; // 重置第一轮触发标记
                    // 隐藏海王得分指示器
                    resetSeakingScore();
                    // 清除对话历史，避免显示海王对战内容
                    conversationHistory = [];
                    
                    // 重置服务器端记忆，避免海王对战历史影响正常聊天
                    try {
                        const resetResponse = await fetch('/reset', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            }
                        });
                        if (resetResponse.ok) {
                            console.log('服务器记忆重置成功');
                            // 清除前端对话历史
                            chatMessages.innerHTML = '';
                            
                            // 在清空后添加切换到正常聊天的系统消息
                            addSystemMessage('已进入💬正常聊天模式，继续和老李唠嗑吧！');
                            
                            // 添加拽姐的欢迎消息
                            setTimeout(() => {
                                addMessage('🚬玩完回来啦？继续想聊点啥呀铁子', 'ai');
                            }, 500);
                        }
                    } catch (error) {
                        console.error('重置记忆失败:', error);
                        // 即使重置失败也显示切换消息
                        addSystemMessage('已进入💬正常聊天模式，继续和老李唠嗑吧！');
                        setTimeout(() => {
                            addMessage('🚬玩完回来啦？继续想聊点啥呀铁子', 'ai');
                        }, 500);
                    }
                }
            });
        });

        // 发送消息
        sendButton.addEventListener('click', sendMessage);
        chatInput.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });

        // 新会话
        newSessionButton.addEventListener('click', async function() {
            try {
                // 调用后端重置会话
                const response = await fetch('/reset', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const data = await response.json();
                
                // 重置前端状态
                conversationHistory = [];
                currentSeakingScore = 0;
                currentSeakingPersona = null; // 清除人设信息
                hasTriggeredFirstRound = false; // 重置第一轮触发标记
                chatMessages.innerHTML = `
                    <div class="message ai">
                        <div class="message-avatar">拽</div>
                        <div class="message-content">开始新的对话吧！我会继续帮你保持理智清醒 😉</div>
                    </div>
                `;
                resetLoveBrainMeter();
                resetSeakingScore();
                resetMemoryStats();
                
                // 更新记忆状态
                if (data.memory_stats) {
                    updateMemoryStats(data.memory_stats);
                }
                
                scrollToBottom();
                
            } catch (error) {
                console.error('重置会话失败:', error);
                // 降级处理：仅前端重置
                conversationHistory = [];
                chatMessages.innerHTML = `
                    <div class="message ai">
                        <div class="message-avatar">拽</div>
                        <div class="message-content">开始新的对话吧！我会继续帮你保持理智清醒 😉</div>
                    </div>
                `;
                resetLoveBrainMeter();
                resetSeakingScore();
                resetMemoryStats();
                scrollToBottom();
                
                // 显示错误提示
                addMessage('会话重置成功，但服务器状态可能未完全重置', 'ai');
            }
        });

        async function sendMessage() {
            const message = chatInput.value.trim();
            if (!message || isTyping) return;

            // 添加用户消息
            addMessage(message, 'user');
            chatInput.value = '';
            // 平滑重置到初始高度
            chatInput.style.height = '60px';

            // 显示打字指示器
            showTypingIndicator();

            try {
                let response;
                
                if (currentButtonType !== '正常聊天' && currentSeakingPersona) {
                    // 海王对战模式 - 直接调用seaking chain
                    const seakingRequestBody = {
                        message: message,
                        button_type: currentButtonType,
                        seaking_score: currentSeakingScore,
                        persona: currentSeakingPersona.persona,
                        gender: currentSeakingPersona.gender,
                        user_gender: currentSeakingPersona.user_gender,
                        challenge_type: currentSeakingPersona.challenge_type,
                        description: currentSeakingPersona.description,
                        style: currentSeakingPersona.style,
                        weakness: currentSeakingPersona.weakness
                    };
                    
                    console.log('海王对战请求参数:', seakingRequestBody);
                    
                    response = await fetch('/chat', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(seakingRequestBody)
                    });
                } else {
                    // 正常聊天模式
                    const normalRequestBody = {
                        message: message,
                        button_type: currentButtonType,
                        seaking_score: currentSeakingScore,
                        history: conversationHistory
                    };
                    
                    console.log('正常聊天请求参数:', normalRequestBody);
                    
                    response = await fetch('/chat', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(normalRequestBody)
                    });
                }

                const data = await response.json();
                
                if (response.ok) {
                    hideTypingIndicator();
                    
                    // 更新恋爱脑指数
                    if (data.love_brain_index !== undefined) {
                        updateLoveBrainMeter(data.love_brain_index, data.love_brain_level);
                    }
                    
                    // 更新记忆状态
                    if (data.memory_stats) {
                        updateMemoryStats(data.memory_stats);
                    } else {
                        // 如果响应中没有memory_stats，主动获取最新状态
                        await loadMemoryStats();
                    }
                    
                    // 更新海王对战状态
                    if (data.seaking_mode && isSeakingMode(currentButtonType)) {
                        const newScore = data.seaking_mode.current_score || 0;
                        console.log('[DEBUG] 海王得分更新:', {
                            oldScore: currentSeakingScore,
                            newScore: newScore,
                            seakingMode: data.seaking_mode
                        });
                        currentSeakingScore = newScore;
                        
                        // 更新得分显示（只在海王模式下）
                        updateSeakingScore(currentSeakingScore);
                        
                        // 检查是否通关
                        if (data.seaking_mode.is_victory) {
                            addSystemMessage('🎉 恭喜通关！你已经成功应对了海王的套路！');
                            // 自动切换回正常聊天模式
                            setTimeout(() => {
                                const normalChatOption = document.querySelector('[data-button-type="正常聊天"]');
                                if (normalChatOption) {
                                    normalChatOption.click();
                                }
                            }, 2000);
                        }
                    }
                    
                    // 添加AI回复
                    console.log('当前模式:', currentButtonType);
                    console.log('响应内容:', data.response);
                    
                    if (currentButtonType !== '正常聊天') {
                        // 海王对战模式 - 解析三段式输出
                        console.log('使用海王对战模式解析');
                        await parseSeakingResponse(data.response);
                    } else {
                        // 普通聊天模式
                        console.log('使用普通聊天模式显示');
                        await addMessageWithTypewriter(data.response, 'ai');
                    }
                    
                    // 更新对话历史
                    conversationHistory.push(
                        { role: 'user', content: message },
                        { role: 'assistant', content: data.response }
                    );
                } else {
                    hideTypingIndicator();
                    const errorMessage = data.detail || data.error || `HTTP ${response.status}: ${response.statusText}`;
                    addMessage(`抱歉，出现了错误：${errorMessage}`, 'ai');
                }
            } catch (error) {
                hideTypingIndicator();
                console.error('聊天请求失败:', error);
                addMessage('网络连接出现问题，请稍后重试', 'ai');
            }
        }

        function addMessage(content, sender) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${sender}`;
            
            const avatar = document.createElement('div');
            avatar.className = 'message-avatar';
            avatar.textContent = sender === 'user' ? '你' : 
                                sender === 'seaking' ? '王' : '拽';
            
            const messageContent = document.createElement('div');
            messageContent.className = 'message-content';
            messageContent.textContent = content;
            
            messageDiv.appendChild(avatar);
            messageDiv.appendChild(messageContent);
            chatMessages.appendChild(messageDiv);
            
            scrollToBottom();
            return messageDiv;
        }

        async function addMessageWithTypewriter(content, sender) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${sender}`;
            
            const avatar = document.createElement('div');
            avatar.className = 'message-avatar';
            avatar.textContent = sender === 'user' ? '你' : 
                                sender === 'seaking' ? '王' : '拽';
            
            const messageContent = document.createElement('div');
            messageContent.className = 'message-content';
            
            const typewriter = document.createElement('div');
            typewriter.className = 'typewriter';
            messageContent.appendChild(typewriter);
            
            messageDiv.appendChild(avatar);
            messageDiv.appendChild(messageContent);
            chatMessages.appendChild(messageDiv);
            
            // 打字机效果
            let i = 0;
            
            function typeChar() {
                if (i < content.length) {
                    typewriter.textContent += content.charAt(i);
                    i++;
                    // 减少滚动频率，只在换行时滚动
                    if (content.charAt(i-1) === '\n') {
                        scrollToBottom();
                    }
                    setTimeout(typeChar, 30);
                } else {
                    // 打字完成后最终滚动
                    scrollToBottom();
                }
            }
            
            typeChar();
        }

        // 解析海王对战的三段式输出
        async function parseSeakingResponse(content) {
            console.log('解析海王对战输出:', content);
            
            // 解析挑战目标（首次对话）
            const challengeMatch = content.match(/【挑战目标】([^【]*)/);
            if (challengeMatch) {
                const challengeText = challengeMatch[1].trim();
                console.log('解析到挑战目标:', challengeText);
                if (challengeText) {
                    addSystemMessage(`🎯 挑战目标: ${challengeText}`);
                    await new Promise(resolve => setTimeout(resolve, 300));
                }
            }
            
            // 解析海王回复
            const seakingMatch = content.match(/【海王】([^【]*)/);
            if (seakingMatch) {
                let seakingText = seakingMatch[1].trim();
                // 清理格式 - 去掉人设名称前缀
                seakingText = seakingText.replace(/^[：""\s]+/, '');
                seakingText = seakingText.replace(/[""]\s*$/, '');
                seakingText = seakingText.replace(/\s*（[^）]*）.*$/, '');
                
                // 去掉人设名称前缀（如"INFP-治愈文青型海王："）
                if (seakingText.includes('：')) {
                    const colonIndex = seakingText.indexOf('：');
                    seakingText = seakingText.substring(colonIndex + 1).trim();
                }
                
                seakingText = seakingText.replace(/\s+/g, ' ').trim();
                
                console.log('解析到海王回复:', seakingText);
                
                if (seakingText) {
                    await addSeakingMessage(seakingText);
                    await new Promise(resolve => setTimeout(resolve, 500));
                }
            } else {
                console.log('未找到海王回复格式');
            }
            
            // 解析可选回应建议
            const suggestionMatch = content.match(/【你】可选回应建议：([^【]*)/);
            if (suggestionMatch) {
                const suggestionText = suggestionMatch[1].trim();
                console.log('解析到回应建议:', suggestionText);
                if (suggestionText) {
                    addSystemMessage(`💡 可选回应建议: ${suggestionText}`);
                    await new Promise(resolve => setTimeout(resolve, 300));
                }
            }
            
            // 解析拽姐旁白
            const commentMatch = content.match(/【拽姐旁白】([^【]*)/);
            if (commentMatch) {
                const commentText = commentMatch[1].trim();
                console.log('解析到拽姐旁白:', commentText);
                if (commentText) {
                    addSystemMessage(commentText);
                }
            } else {
                console.log('未找到拽姐旁白格式');
            }
        }

        async function addSeakingMessage(content) {
            const messageDiv = document.createElement('div');
            messageDiv.className = 'message seaking';
            
            const avatar = document.createElement('div');
            avatar.className = 'message-avatar';
            avatar.textContent = '王';
            
            const messageContent = document.createElement('div');
            messageContent.className = 'message-content';
            
            const typewriter = document.createElement('div');
            typewriter.className = 'typewriter';
            messageContent.appendChild(typewriter);
            
            messageDiv.appendChild(avatar);
            messageDiv.appendChild(messageContent);
            
            chatMessages.appendChild(messageDiv);
            scrollToBottom();
            
            // 打字机效果
            let i = 0;
            
            function typeSeakingChar() {
                if (i < content.length) {
                    typewriter.textContent += content.charAt(i);
                    i++;
                    if (content.charAt(i-1) === '\n') {
                        scrollToBottom();
                    }
                    setTimeout(typeSeakingChar, 30);
                } else {
                    scrollToBottom();
                }
            }
            
            typeSeakingChar();
        }

        function addSystemMessage(content) {
            const messageDiv = document.createElement('div');
            messageDiv.className = 'message system';
            
            const messageContent = document.createElement('div');
            messageContent.className = 'message-content';
            messageContent.textContent = content;
            
            // 系统消息不需要头像，直接添加内容
            messageDiv.appendChild(messageContent);
            chatMessages.appendChild(messageDiv);
            
            scrollToBottom();
        }

        function showTypingIndicator() {
            isTyping = true;
            sendButton.disabled = true;
            
            const typingDiv = document.createElement('div');
            // 根据当前模式设置不同的类名和头像样式
            if (currentButtonType !== '正常聊天') {
                typingDiv.className = 'message seaking';
            } else {
                typingDiv.className = 'message ai';
            }
            typingDiv.id = 'typing-indicator';
            
            const avatar = document.createElement('div');
            avatar.className = 'message-avatar';
            avatar.textContent = currentButtonType !== '正常聊天' ? '王' : '拽';
            
            const indicatorContent = document.createElement('div');
            indicatorContent.className = 'typing-indicator';
            
            const dots = document.createElement('div');
            dots.className = 'typing-dots';
            
            for (let i = 0; i < 3; i++) {
                const dot = document.createElement('div');
                dot.className = 'typing-dot';
                dots.appendChild(dot);
            }
            
            indicatorContent.appendChild(dots);
            typingDiv.appendChild(avatar);
            typingDiv.appendChild(indicatorContent);
            chatMessages.appendChild(typingDiv);
            
            scrollToBottom();
        }

        function hideTypingIndicator() {
            isTyping = false;
            sendButton.disabled = false;
            const typingIndicator = document.getElementById('typing-indicator');
            if (typingIndicator) {
                typingIndicator.remove();
            }
        }

        function scrollToBottom() {
            setTimeout(() => {
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }, 100);
        }

        // 恋爱脑指数更新函数
        function updateLoveBrainMeter(index, level) {
            loveBrainIndicator.classList.remove('love-brain-hidden');
            
            // 更新数值
            meterValue.textContent = index;
            
            // 转换等级显示格式
            let displayLevel = level || '未知';
            if (level === '轻') displayLevel = '轻度';
            else if (level === '中') displayLevel = '中度';
            else if (level === '重') displayLevel = '重度';
            else if (level === '危险') displayLevel = '危险';
            
            meterLevel.textContent = displayLevel;
            
            // 更新进度条
            meterFill.style.width = `${index}%`;
            
            // 更新等级样式 - 使用原始的level作为CSS类名
            meterLevel.className = 'meter-level';
            if (level) {
                meterLevel.classList.add(level);
            }
            
            // 添加动画效果
            loveBrainIndicator.style.animation = 'pulse 0.5s ease-in-out';
            setTimeout(() => {
                loveBrainIndicator.style.animation = '';
            }, 500);
        }

        // 检查是否为海王模式
        function isSeakingMode(buttonType) {
            return buttonType !== '正常聊天';
        }

        // 更新海王对战得分
        function updateSeakingScore(score) {
            console.log('[DEBUG] updateSeakingScore 被调用');
            console.log('[DEBUG] currentButtonType:', currentButtonType);
            console.log('[DEBUG] isSeakingMode结果:', isSeakingMode(currentButtonType));
            console.log('[DEBUG] score:', score);
            
            if (isSeakingMode(currentButtonType)) {
                console.log('[DEBUG] 显示得分指示器');
                seakingScoreInline.classList.remove('seaking-score-hidden');
                // 清除内联隐藏样式，让CSS类生效
                seakingScoreInline.style.display = '';
                seakingScoreValue.textContent = score;
                seakingScoreFill.style.width = `${score}%`;
                
                // 添加动画效果
                seakingScoreInline.style.animation = 'pulse 0.5s ease-in-out';
                setTimeout(() => {
                    seakingScoreInline.style.animation = '';
                }, 500);
            } else {
                console.log('[DEBUG] 隐藏得分指示器');
                seakingScoreInline.classList.add('seaking-score-hidden');
                // 强制隐藏：同时使用CSS类和内联样式
                seakingScoreInline.style.display = 'none';
            }
        }

        // 重置海王对战得分
        function resetSeakingScore() {
            console.log('[DEBUG] resetSeakingScore 被调用');
            seakingScoreInline.classList.add('seaking-score-hidden');
            // 强制隐藏：同时使用CSS类和内联样式
            seakingScoreInline.style.display = 'none';
            seakingScoreFill.style.width = '0%';
            seakingScoreValue.textContent = '0';
            console.log('[DEBUG] 得分指示器已隐藏（双重保险）');
        }

        // 重置恋爱脑指数
        function resetLoveBrainMeter() {
            loveBrainIndicator.classList.add('love-brain-hidden');
            meterFill.style.width = '0%';
            meterLevel.textContent = '未检测';
            meterLevel.className = 'meter-level';
            meterValue.textContent = '--';
        }

        // 加载记忆状态
        async function loadMemoryStats() {
            try {
                const response = await fetch('/memory/stats');
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                const data = await response.json();
                updateMemoryStats(data);
            } catch (error) {
                console.error('❌ 加载记忆状态失败:', error);
                // 设置默认值
                resetMemoryStats();
            }
        }

        // 更新记忆状态
        function updateMemoryStats(stats) {
            if (!stats) {
                console.warn('⚠️ 记忆状态数据为空');
                return;
            }
            
            // 更新轮数
            const roundCount = stats.conversation_count || 0;
            memoryRounds.textContent = roundCount;
            
            // 更新使用率
            const usageRatio = stats.memory_usage_ratio || 0;
            const usagePercent = Math.round(usageRatio * 100);
            memoryUsage.textContent = `${usagePercent}%`;
            
            // 更新样式
            memoryUsage.className = 'memory-usage';
            if (usagePercent >= 80) {
                memoryUsage.classList.add('high');
            } else if (usagePercent >= 60) {
                memoryUsage.classList.add('medium');
            } else {
                memoryUsage.classList.add('low');
            }
            
            // 更新提示信息
            let tooltipText = `对话轮数: ${stats.conversation_count}\n`;
            tooltipText += `Token使用: ${stats.estimated_tokens}/${stats.max_tokens}\n`;
            tooltipText += `使用率: ${usagePercent}%`;
            
            if (stats.user_patterns && Object.keys(stats.user_patterns).length > 0) {
                tooltipText += '\n行为模式: ' + Object.entries(stats.user_patterns)
                    .map(([pattern, count]) => `${pattern}(${count})`)
                    .join(', ');
            }
            
            memoryIndicator.title = tooltipText;
        }

        // 记忆详情点击事件
        function showMemoryModal(data) {
            // 移除已存在的modal
            const oldModal = document.getElementById('memoryModal');
            if (oldModal) oldModal.remove();

            const modal = document.createElement('div');
            modal.id = 'memoryModal';
            modal.style.position = 'fixed';
            modal.style.left = '0';
            modal.style.top = '0';
            modal.style.width = '100vw';
            modal.style.height = '100vh';
            modal.style.background = 'rgba(0,0,0,0.6)';
            modal.style.zIndex = '9999';
            modal.style.display = 'flex';
            modal.style.alignItems = 'center';
            modal.style.justifyContent = 'center';
            modal.style.backdropFilter = 'blur(4px)';

            const content = document.createElement('div');
            content.style.background = 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)';
            content.style.padding = '40px';
            content.style.borderRadius = '20px';
            content.style.maxWidth = '1200px';
            content.style.width = '95vw';
            content.style.maxHeight = '90vh';
            content.style.overflow = 'auto';
            content.style.position = 'relative';
            content.style.boxShadow = '0 20px 40px rgba(0,0,0,0.3)';
            content.style.border = '2px solid rgba(255,255,255,0.1)';
            content.style.color = 'white';
            content.style.fontFamily = 'Inter, sans-serif';

            // 关闭按钮
            const closeBtn = document.createElement('button');
            closeBtn.innerHTML = '✕';
            closeBtn.style.position = 'absolute';
            closeBtn.style.top = '16px';
            closeBtn.style.right = '20px';
            closeBtn.style.fontSize = '1.5rem';
            closeBtn.style.background = 'rgba(255,255,255,0.2)';
            closeBtn.style.border = 'none';
            closeBtn.style.borderRadius = '50%';
            closeBtn.style.width = '36px';
            closeBtn.style.height = '36px';
            closeBtn.style.cursor = 'pointer';
            closeBtn.style.color = 'white';
            closeBtn.style.display = 'flex';
            closeBtn.style.alignItems = 'center';
            closeBtn.style.justifyContent = 'center';
            closeBtn.style.transition = 'all 0.3s ease';
            closeBtn.onmouseover = () => {
                closeBtn.style.background = 'rgba(255,255,255,0.3)';
                closeBtn.style.transform = 'scale(1.1)';
            };
            closeBtn.onmouseout = () => {
                closeBtn.style.background = 'rgba(255,255,255,0.2)';
                closeBtn.style.transform = 'scale(1)';
            };
            closeBtn.onclick = () => modal.remove();
            content.appendChild(closeBtn);

            // 标题
            const title = document.createElement('h2');
            title.textContent = '🧠 智能记忆详情';
            title.style.marginTop = '0';
            title.style.marginBottom = '32px';
            title.style.fontSize = '2rem';
            title.style.fontWeight = '600';
            title.style.textAlign = 'center';
            title.style.textShadow = '0 2px 4px rgba(0,0,0,0.3)';
            content.appendChild(title);

            // 创建网格容器
            const gridContainer = document.createElement('div');
            gridContainer.style.display = 'grid';
            gridContainer.style.gridTemplateColumns = '1fr 1fr';
            gridContainer.style.gap = '24px';
            gridContainer.style.marginBottom = '20px';
            content.appendChild(gridContainer);

            // 统计信息卡片
            const stats = data.stats || {};
            const statsCard = document.createElement('div');
            statsCard.style.background = 'rgba(255,255,255,0.1)';
            statsCard.style.padding = '20px';
            statsCard.style.borderRadius = '12px';
            statsCard.style.backdropFilter = 'blur(10px)';
            statsCard.style.border = '1px solid rgba(255,255,255,0.2)';
            
            statsCard.innerHTML = `
                <div style="display: flex; align-items: center; margin-bottom: 16px;">
                    <span style="font-size: 1.5rem; margin-right: 8px;">📊</span>
                    <strong style="font-size: 1.1rem;">统计信息</strong>
                </div>
                <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 12px; font-size: 0.9rem;">
                    <div>对话轮数: <span style="color: #ffd700; font-weight: 600;">${stats.conversation_count || 0}</span></div>
                    <div>Token使用: <span style="color: #ffd700; font-weight: 600;">${stats.estimated_tokens || 0}/${stats.max_tokens || 0}</span></div>
                    <div>使用率: <span style="color: #ffd700; font-weight: 600;">${Math.round((stats.memory_usage_ratio || 0) * 100)}%</span></div>
                    <div>行为模式: <span style="color: #ffd700; font-weight: 600;">${stats.pattern_count || 0}种</span></div>
                </div>
            `;
            gridContainer.appendChild(statsCard);

            // 用户画像卡片
            if (data.user_profile && data.user_profile.summary) {
                const profileCard = document.createElement('div');
                profileCard.style.background = 'rgba(255,255,255,0.1)';
                profileCard.style.padding = '20px';
                profileCard.style.borderRadius = '12px';
                profileCard.style.backdropFilter = 'blur(10px)';
                profileCard.style.border = '1px solid rgba(255,255,255,0.2)';
                
                let profileContent = `
                    <div style="display: flex; align-items: center; margin-bottom: 16px;">
                        <span style="font-size: 1.5rem; margin-right: 8px;">👤</span>
                        <strong style="font-size: 1.1rem;">用户画像分析</strong>
                    </div>
                    <div style="font-size: 0.9rem; line-height: 1.6; margin-bottom: 12px;">
                        ${data.user_profile.summary}
                    </div>
                `;
                
                if (data.user_profile.personality_traits && data.user_profile.personality_traits.length > 0) {
                    profileContent += `
                        <div style="margin-top: 12px;">
                            <strong style="color: #ffd700;">个性特征:</strong>
                            <div style="display: flex; flex-wrap: wrap; gap: 8px; margin-top: 8px;">
                                ${data.user_profile.personality_traits.map(trait => 
                                    `<span style="background: rgba(255,215,0,0.2); padding: 6px 12px; border-radius: 16px; font-size: 0.85rem; border: 1px solid rgba(255,215,0,0.3);">${trait}</span>`
                                ).join('')}
                            </div>
                        </div>
                    `;
                }
                
                profileCard.innerHTML = profileContent;
                gridContainer.appendChild(profileCard);
            } else {
                // 如果用户画像为空，创建一个占位卡片
                const placeholderCard = document.createElement('div');
                placeholderCard.style.background = 'rgba(255,255,255,0.05)';
                placeholderCard.style.padding = '20px';
                placeholderCard.style.borderRadius = '12px';
                placeholderCard.style.border = '1px dashed rgba(255,255,255,0.2)';
                placeholderCard.style.display = 'flex';
                placeholderCard.style.alignItems = 'center';
                placeholderCard.style.justifyContent = 'center';
                placeholderCard.style.color = 'rgba(255,255,255,0.6)';
                placeholderCard.innerHTML = '<div style="text-align: center;"><span style="font-size: 2rem; margin-bottom: 8px; display: block;">👤</span>用户画像数据不足</div>';
                gridContainer.appendChild(placeholderCard);
            }

            // 上下文摘要
            if (data.context_summary && data.context_summary !== "暂无记忆上下文") {
                const ctxCard = document.createElement('div');
                ctxCard.style.background = 'rgba(255,255,255,0.1)';
                ctxCard.style.padding = '20px';
                ctxCard.style.borderRadius = '12px';
                ctxCard.style.backdropFilter = 'blur(10px)';
                ctxCard.style.border = '1px solid rgba(255,255,255,0.2)';
                ctxCard.innerHTML = `
                    <div style="display: flex; align-items: center; margin-bottom: 16px;">
                        <span style="font-size: 1.5rem; margin-right: 8px;">📋</span>
                        <strong style="font-size: 1.1rem;">上下文摘要</strong>
                    </div>
                    <div style="font-size: 0.9rem; line-height: 1.6;">${data.context_summary}</div>
                `;
                gridContainer.appendChild(ctxCard);
            } else {
                // 如果上下文摘要为空，创建一个占位卡片
                const placeholderCard = document.createElement('div');
                placeholderCard.style.background = 'rgba(255,255,255,0.05)';
                placeholderCard.style.padding = '20px';
                placeholderCard.style.borderRadius = '12px';
                placeholderCard.style.border = '1px dashed rgba(255,255,255,0.2)';
                placeholderCard.style.display = 'flex';
                placeholderCard.style.alignItems = 'center';
                placeholderCard.style.justifyContent = 'center';
                placeholderCard.style.color = 'rgba(255,255,255,0.6)';
                placeholderCard.innerHTML = '<div style="text-align: center;"><span style="font-size: 2rem; margin-bottom: 8px; display: block;">📋</span>暂无上下文摘要</div>';
                gridContainer.appendChild(placeholderCard);
            }

            // 行为模式分析
            if (stats.user_patterns && Object.keys(stats.user_patterns).length > 0) {
                const patternCard = document.createElement('div');
                patternCard.style.background = 'rgba(255,255,255,0.1)';
                patternCard.style.padding = '20px';
                patternCard.style.borderRadius = '12px';
                patternCard.style.backdropFilter = 'blur(10px)';
                patternCard.style.border = '1px solid rgba(255,255,255,0.2)';
                
                const patternItems = Object.entries(stats.user_patterns)
                    .sort((a, b) => b[1] - a[1])
                    .map(([pattern, count]) => {
                        const intensity = count >= 3 ? '🔴' : count >= 2 ? '🟡' : '🟢';
                        return `<div style="display: flex; justify-content: space-between; align-items: center; padding: 10px 0; border-bottom: 1px solid rgba(255,255,255,0.1);">
                            <span style="font-size: 0.95rem;">${intensity} ${pattern}</span>
                            <span style="color: #ffd700; font-weight: 600; font-size: 0.95rem;">${count}次</span>
                        </div>`;
                    }).join('');
                
                patternCard.innerHTML = `
                    <div style="display: flex; align-items: center; margin-bottom: 16px;">
                        <span style="font-size: 1.5rem; margin-right: 8px;">🎯</span>
                        <strong style="font-size: 1.1rem;">行为模式分析</strong>
                    </div>
                    <div style="font-size: 0.9rem;">
                        ${patternItems}
                    </div>
                `;
                gridContainer.appendChild(patternCard);
            } else {
                // 如果行为模式为空，创建一个占位卡片
                const placeholderCard = document.createElement('div');
                placeholderCard.style.background = 'rgba(255,255,255,0.05)';
                placeholderCard.style.padding = '20px';
                placeholderCard.style.borderRadius = '12px';
                placeholderCard.style.border = '1px dashed rgba(255,255,255,0.2)';
                placeholderCard.style.display = 'flex';
                placeholderCard.style.alignItems = 'center';
                placeholderCard.style.justifyContent = 'center';
                placeholderCard.style.color = 'rgba(255,255,255,0.6)';
                placeholderCard.innerHTML = '<div style="text-align: center;"><span style="font-size: 2rem; margin-bottom: 8px; display: block;">🎯</span>暂无行为模式数据</div>';
                gridContainer.appendChild(placeholderCard);
            }

            // 关键洞察
            if (data.long_term_details && data.long_term_details.key_insights && data.long_term_details.key_insights.length > 0) {
                const insightCard = document.createElement('div');
                insightCard.style.background = 'rgba(255,255,255,0.1)';
                insightCard.style.padding = '20px';
                insightCard.style.borderRadius = '12px';
                insightCard.style.backdropFilter = 'blur(10px)';
                insightCard.style.border = '1px solid rgba(255,255,255,0.2)';
                
                const insightItems = data.long_term_details.key_insights
                    .slice(-3) // 只显示最近3条
                    .map(insight => `<div style="padding: 10px 0; border-bottom: 1px solid rgba(255,255,255,0.1); font-size: 0.9rem; line-height: 1.5;">💡 ${insight}</div>`)
                    .join('');
                
                insightCard.innerHTML = `
                    <div style="display: flex; align-items: center; margin-bottom: 16px;">
                        <span style="font-size: 1.5rem; margin-right: 8px;">💡</span>
                        <strong style="font-size: 1.1rem;">关键洞察</strong>
                    </div>
                    <div>
                        ${insightItems}
                    </div>
                `;
                gridContainer.appendChild(insightCard);
            }

            modal.appendChild(content);
            document.body.appendChild(modal);
            
            // 添加动画效果
            content.style.opacity = '0';
            content.style.transform = 'scale(0.8)';
            setTimeout(() => {
                content.style.transition = 'all 0.3s ease';
                content.style.opacity = '1';
                content.style.transform = 'scale(1)';
            }, 10);
        }

        memoryIndicator.addEventListener('click', async function() {
            try {
                const response = await fetch('/memory/summary');
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                const data = await response.json();
                showMemoryModal(data);
            } catch (error) {
                console.error('获取记忆详情失败:', error);
                alert('获取记忆详情失败，请稍后重试');
            }
        });

        // 重置记忆状态
        function resetMemoryStats() {
            memoryRounds.textContent = '0';
            memoryUsage.textContent = '0%';
            memoryUsage.className = 'memory-usage low';
            memoryIndicator.title = '记忆已重置';
        }

        // 页面初始化：确保得分指示器在正常聊天模式下被隐藏
        function initializeUI() {
            console.log('[DEBUG] 初始化UI状态');
            console.log('[DEBUG] currentButtonType:', currentButtonType);
            console.log('[DEBUG] isSeakingMode结果:', isSeakingMode(currentButtonType));
            
            // 确保得分指示器根据当前模式正确显示/隐藏
            if (currentButtonType === '正常聊天') {
                console.log('[DEBUG] 正常聊天模式，隐藏得分指示器');
                resetSeakingScore();
                
                // 调试：检查元素的实际样式
                setTimeout(() => {
                    const computedStyle = window.getComputedStyle(seakingScoreInline);
                    console.log('[DEBUG] 元素CSS类:', seakingScoreInline.className);
                    console.log('[DEBUG] 内联样式display:', seakingScoreInline.style.display);
                    console.log('[DEBUG] 计算后的display:', computedStyle.display);
                    console.log('[DEBUG] 元素是否可见:', seakingScoreInline.offsetWidth > 0 && seakingScoreInline.offsetHeight > 0);
                }, 100);
            } else {
                console.log('[DEBUG] 海王模式，显示得分指示器');
                updateSeakingScore(currentSeakingScore);
            }
        }

        // 自动触发第一轮海王对战
        async function triggerFirstSeakingRound() {
            if (currentButtonType === '正常聊天' || !currentSeakingPersona || hasTriggeredFirstRound) {
                return;
            }
            
            // 标记已触发，防止重复
            hasTriggeredFirstRound = true;
            
            try {
                console.log('[DEBUG] 触发第一轮海王对战');
                
                // 直接显示挑战目标和海王开场白，不发送请求到后端
                if (currentSeakingPersona.challenge_goal) {
                    addSystemMessage(currentSeakingPersona.challenge_goal);
                }
                
                if (currentSeakingPersona.first_greeting) {
                    // 海王开场白应该显示为海王头像（红色）
                    addMessage(currentSeakingPersona.first_greeting, 'seaking');
                }
                
                console.log('[DEBUG] 第一轮海王对战内容已显示');
            } catch (error) {
                console.error('第一轮海王对战触发失败:', error);
            }
        }

        // 页面加载完成后初始化UI状态
        initializeUI();
    </script>
</body>
</html>
